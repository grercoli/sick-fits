#Prisma actually uses this thing called GraphQL Import, so I can import for example the Item type which Im returnting in Mutation. This is done by putting a comment
#It's gonna import all of the types and all the inputs from prisma.graphql, if it's not used in our schema it's not going to be imported
#So in mutation I can return an Item without having the type of item defined in this public facing API

# import * from './generated/prisma.graphql'

# type Dog {
#     name: String!
# }

type Mutation {
    # createDog(name: String!): Dog
    createItem(title: String, description: String, price: Int, image: String, largeImage: String): Item!
    updateItem(id: ID!, title: String, description: String, price: Int): Item!
    deleteItem(id: ID!): Item
}

type Query {
    #dogs: [Dog]!
    items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, first: Int): [Item]! # items gonna return an array of item. El where sirve para que lo que es searching. El orderBy por si quiero tenerlos ordenados por el mas reciente por ejemplo. The first and the skip are going to say: I want to skip the first four items but i want to bring back four items in total
    item(where: ItemWhereUniqueInput!): Item
    itemsConnection(where: ItemWhereInput): ItemConnection!
}